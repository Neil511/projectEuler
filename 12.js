// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?


// Pseudocode:

// getTriangleNumber(n) - generates a triangle number up to counter n
// getNumOfDivisors(n) - returns number of divisors of n, including 1 and itself

function getTriangleNumber(n) {
	return (n * (n + 1) / 2);
}

function getNumOfDivisors(n) {
	var counter = 2;
	for(var i = 2; i <= Math.sqrt(n); i++) {
		if(n % i === 0) {
			counter += 2;
		}
	}

	return counter;
}
var n = 1;
console.time("Poop");
while(getNumOfDivisors(getTriangleNumber(n)) <= 500 ) {
	n ++;
}

console.log(getTriangleNumber(n));


console.timeEnd("Poop");
